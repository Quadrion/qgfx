# GNU Make project makefile autogenerated by Premake

ifndef config
  config=opengldebug_x86
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild prelink

ifeq ($(config),opengldebug_x86)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/OpenGLDebug/linux/x86/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/OpenGLDebug/linux/x86/qgfx
  DEFINES += -DQGFX_VULKAN -DQGFX_OPENGL -D_DEBUG
  INCLUDES += -Iincludes -I../../dependencies/Glad/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -g -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -g -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/OpenGLDebug/linux/x86/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDebug/linux/x86/Glad/libGlad.a -lgl
  LDDEPS += ../../dependencies/GLFW/bin/OpenGLDebug/linux/x86/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDebug/linux/x86/Glad/libGlad.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),opengldebug_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/OpenGLDebug/linux/x86_64/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/OpenGLDebug/linux/x86_64/qgfx
  DEFINES += -DQGFX_VULKAN -DQGFX_OPENGL -D_DEBUG
  INCLUDES += -Iincludes -I../../dependencies/Glad/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -g -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/OpenGLDebug/linux/x86_64/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDebug/linux/x86_64/Glad/libGlad.a -lgl
  LDDEPS += ../../dependencies/GLFW/bin/OpenGLDebug/linux/x86_64/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDebug/linux/x86_64/Glad/libGlad.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),openglrelease_x86)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/OpenGLRelease/linux/x86/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/OpenGLRelease/linux/x86/qgfx
  DEFINES += -DQGFX_VULKAN -DQGFX_OPENGL -D_RELEASE
  INCLUDES += -Iincludes -I../../dependencies/Glad/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/OpenGLRelease/linux/x86/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLRelease/linux/x86/Glad/libGlad.a -lgl
  LDDEPS += ../../dependencies/GLFW/bin/OpenGLRelease/linux/x86/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLRelease/linux/x86/Glad/libGlad.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),openglrelease_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/OpenGLRelease/linux/x86_64/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/OpenGLRelease/linux/x86_64/qgfx
  DEFINES += -DQGFX_VULKAN -DQGFX_OPENGL -D_RELEASE
  INCLUDES += -Iincludes -I../../dependencies/Glad/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/OpenGLRelease/linux/x86_64/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLRelease/linux/x86_64/Glad/libGlad.a -lgl
  LDDEPS += ../../dependencies/GLFW/bin/OpenGLRelease/linux/x86_64/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLRelease/linux/x86_64/Glad/libGlad.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),opengldistribution_x86)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/OpenGLDistribution/linux/x86/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/OpenGLDistribution/linux/x86/qgfx
  DEFINES += -DQGFX_VULKAN -DQGFX_OPENGL -D_DIST
  INCLUDES += -Iincludes -I../../dependencies/Glad/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/OpenGLDistribution/linux/x86/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDistribution/linux/x86/Glad/libGlad.a -lgl
  LDDEPS += ../../dependencies/GLFW/bin/OpenGLDistribution/linux/x86/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDistribution/linux/x86/Glad/libGlad.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),opengldistribution_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/OpenGLDistribution/linux/x86_64/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/OpenGLDistribution/linux/x86_64/qgfx
  DEFINES += -DQGFX_VULKAN -DQGFX_OPENGL -D_DIST
  INCLUDES += -Iincludes -I../../dependencies/Glad/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/OpenGLDistribution/linux/x86_64/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDistribution/linux/x86_64/Glad/libGlad.a -lgl
  LDDEPS += ../../dependencies/GLFW/bin/OpenGLDistribution/linux/x86_64/GLFW/libGLFW.a ../../dependencies/Glad/bin/OpenGLDistribution/linux/x86_64/Glad/libGlad.a
  ALL_LDFLAGS += $(LDFLAGS) -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),vulkandebug_x86)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/VulkanDebug/linux/x86/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/VulkanDebug/linux/x86/qgfx
  DEFINES += -DQGFX_VULKAN -D_DEBUG
  INCLUDES += -Iincludes -I../../dependencies/Vulkan/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -g -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -g -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/VulkanDebug/linux/x86/GLFW/libGLFW.a -lvulkan-1
  LDDEPS += ../../dependencies/GLFW/bin/VulkanDebug/linux/x86/GLFW/libGLFW.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../dependencies/Vulkan/lib32 -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),vulkandebug_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/VulkanDebug/linux/x86_64/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/VulkanDebug/linux/x86_64/qgfx
  DEFINES += -DQGFX_VULKAN -D_DEBUG
  INCLUDES += -Iincludes -I../../dependencies/Vulkan/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -g -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -g -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/VulkanDebug/linux/x86_64/GLFW/libGLFW.a -lvulkan-1
  LDDEPS += ../../dependencies/GLFW/bin/VulkanDebug/linux/x86_64/GLFW/libGLFW.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../dependencies/Vulkan/lib -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),vulkanrelease_x86)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/VulkanRelease/linux/x86/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/VulkanRelease/linux/x86/qgfx
  DEFINES += -DQGFX_VULKAN -D_RELEASE
  INCLUDES += -Iincludes -I../../dependencies/Vulkan/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O2 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/VulkanRelease/linux/x86/GLFW/libGLFW.a -lvulkan-1
  LDDEPS += ../../dependencies/GLFW/bin/VulkanRelease/linux/x86/GLFW/libGLFW.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../dependencies/Vulkan/lib32 -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),vulkanrelease_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/VulkanRelease/linux/x86_64/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/VulkanRelease/linux/x86_64/qgfx
  DEFINES += -DQGFX_VULKAN -D_RELEASE
  INCLUDES += -Iincludes -I../../dependencies/Vulkan/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/VulkanRelease/linux/x86_64/GLFW/libGLFW.a -lvulkan-1
  LDDEPS += ../../dependencies/GLFW/bin/VulkanRelease/linux/x86_64/GLFW/libGLFW.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../dependencies/Vulkan/lib -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),vulkandistribution_x86)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/VulkanDistribution/linux/x86/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/VulkanDistribution/linux/x86/qgfx
  DEFINES += -DQGFX_VULKAN -D_DIST
  INCLUDES += -Iincludes -I../../dependencies/Vulkan/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m32 -O3 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/VulkanDistribution/linux/x86/GLFW/libGLFW.a -lvulkan-1
  LDDEPS += ../../dependencies/GLFW/bin/VulkanDistribution/linux/x86/GLFW/libGLFW.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../dependencies/Vulkan/lib32 -L/usr/lib32 -m32
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

ifeq ($(config),vulkandistribution_x64)
  ifeq ($(origin CC), default)
    CC = clang
  endif
  ifeq ($(origin CXX), default)
    CXX = clang++
  endif
  ifeq ($(origin AR), default)
    AR = ar
  endif
  TARGETDIR = ../../bin/VulkanDistribution/linux/x86_64/qgfx
  TARGET = $(TARGETDIR)/libqgfx.a
  OBJDIR = ../../intermediates/VulkanDistribution/linux/x86_64/qgfx
  DEFINES += -DQGFX_VULKAN -D_DIST
  INCLUDES += -Iincludes -I../../dependencies/Vulkan/include -I../../dependencies/GLFW/include
  FORCE_INCLUDE +=
  ALL_CPPFLAGS += $(CPPFLAGS) -MMD -MP $(DEFINES) $(INCLUDES)
  ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++17
  ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O3 -std=c++17
  ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
  LIBS += ../../dependencies/GLFW/bin/VulkanDistribution/linux/x86_64/GLFW/libGLFW.a -lvulkan-1
  LDDEPS += ../../dependencies/GLFW/bin/VulkanDistribution/linux/x86_64/GLFW/libGLFW.a
  ALL_LDFLAGS += $(LDFLAGS) -L../../dependencies/Vulkan/lib -L/usr/lib64 -m64
  LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
  define PREBUILDCMDS
  endef
  define PRELINKCMDS
  endef
  define POSTBUILDCMDS
  endef
all: prebuild prelink $(TARGET)
	@:

endif

OBJECTS := \
	$(OBJDIR)/opengl_context_handle.o \
	$(OBJDIR)/opengl_shader.o \
	$(OBJDIR)/qgfx.o \
	$(OBJDIR)/vulkan_context_handle.o \
	$(OBJDIR)/vulkan_pipeline.o \
	$(OBJDIR)/vulkan_rasterizer.o \
	$(OBJDIR)/vulkan_shader.o \
	$(OBJDIR)/vulkan_vertexbuffer.o \

RESOURCES := \

CUSTOMFILES := \

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

$(TARGET): $(GCH) ${CUSTOMFILES} $(OBJECTS) $(LDDEPS) $(RESOURCES) | $(TARGETDIR)
	@echo Linking qgfx
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(CUSTOMFILES): | $(OBJDIR)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning qgfx
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild:
	$(PREBUILDCMDS)

prelink:
	$(PRELINKCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) $(PCH) | $(OBJDIR)
$(GCH): $(PCH) | $(OBJDIR)
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
else
$(OBJECTS): | $(OBJDIR)
endif

$(OBJDIR)/opengl_context_handle.o: src/qgfx/opengl/opengl_context_handle.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/opengl_shader.o: src/qgfx/opengl/opengl_shader.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/qgfx.o: src/qgfx/qgfx.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vulkan_context_handle.o: src/qgfx/vulkan/vulkan_context_handle.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vulkan_pipeline.o: src/qgfx/vulkan/vulkan_pipeline.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vulkan_rasterizer.o: src/qgfx/vulkan/vulkan_rasterizer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vulkan_shader.o: src/qgfx/vulkan/vulkan_shader.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/vulkan_vertexbuffer.o: src/qgfx/vulkan/vulkan_vertexbuffer.cpp
	@echo $(notdir $<)
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(OBJDIR)/$(notdir $(PCH)).d
endif